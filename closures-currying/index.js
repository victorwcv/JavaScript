/* 
!!ğŸ”’ Closures
Un closure es cuando una funciÃ³n interna "recuerda" las variables de su contexto externo, incluso despuÃ©s de que ese contexto haya terminado.

âœ… Â¿CuÃ¡ndo usarlo?

- Para guardar estado sin variables globales
- Para crear funciones con configuraciÃ³n interna
- Para generar lÃ³gica reutilizable (ej: contador, logger)
*/

function saludar(nombre) {
  return function () {
    console.log(`Hola, ${nombre}`);
  };
}
const saludo = saludar("Will");
saludo(); // Hola, Will


/* 
!!ğŸ§© Currying
El currying transforma una funciÃ³n que recibe mÃºltiples argumentos en una serie de funciones que reciben uno por uno.

âœ… Â¿CuÃ¡ndo usarlo?

- Cuando querÃ©s crear funciones reutilizables con parÃ¡metros predefinidos
- Para composiciÃ³n de funciones
- Para construir lÃ³gica declarativa y flexible
*/

function multiplicar(a) {
  return function (b) {
    return a * b;
  };
}
const por2 = multiplicar(2);
console.log(por2(5)); // 10
